[{"C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\index.tsx":"1","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\reportWebVitals.ts":"2","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\App.tsx":"3","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\components\\TypeArea\\TypeArea.tsx":"4","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\components\\TitleBar\\TitleBar.tsx":"5","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\components\\Menu\\Menu.tsx":"6","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\contexts\\ThemeContext.tsx":"7","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\utils\\ThemeMap.ts":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":551,"mtime":1609220251994,"results":"12","hashOfConfig":"10"},{"size":5042,"mtime":1609168883706,"results":"13","hashOfConfig":"10"},{"size":1747,"mtime":1609167019729,"results":"14","hashOfConfig":"10"},{"size":675,"mtime":1609141489017,"results":"15","hashOfConfig":"10"},{"size":161,"mtime":1609166489127,"results":"16","hashOfConfig":"10"},{"size":440,"mtime":1609167093088,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"xpk90f",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\index.tsx",[],["39","40"],"C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\reportWebVitals.ts",[],"C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\App.tsx",[],"C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\components\\TypeArea\\TypeArea.tsx",["41","42"],"import {useState, useEffect, useContext} from 'react';\r\n\r\nimport styles from './TypeArea.module.css';\r\nimport openIcon from '../../images/openIcon.svg';\r\nimport saveIcon from '../../images/saveIcon.svg';\r\nimport themeIcon from '../../images/themeIcon.svg';\r\nimport Menu from '../Menu/Menu';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport themeMap from '../../utils/ThemeMap';\r\nconst electron = window.require(\"electron\");\r\nconst remote = electron.remote;\r\nconst Store = remote.require('electron-store');\r\nconst {dialog} = remote\r\nconst electronLocalshortcut = remote.require('electron-localshortcut');\r\nconst fs = remote.require('fs');\r\n\r\nconst store = new Store();\r\n\r\nconst TypeArea = () => {\r\n\r\n  const {theme, setTheme} = useContext(ThemeContext);\r\n  const [textVal, setTextVal] = useState<string>(\"\");\r\n  const [pathLoc, setPathLoc] = useState<string>(\"\");\r\n  const [isSaved, setIsSaved] = useState<boolean>(false);\r\n  const [isThemeMenuOpen, setIsThemeMenuOpen] = useState<boolean>(false);\r\n\r\n  const bottomBarStyle: React.CSSProperties = {\r\n    backgroundColor: `${themeMap[theme].menuBg}`\r\n  }\r\n  const textAreaStyle: React.CSSProperties = {\r\n    backgroundColor: `${themeMap[theme].textBg}`, \r\n    color: `${themeMap[theme].textColor}`\r\n  }\r\n  const optionBtnsStyles: React.CSSProperties = {\r\n    backgroundColor : `${themeMap[theme].textBg}`,\r\n    color: `${themeMap[theme].textColor}`\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if(remote.process.argv.length > 1){\r\n      fs.readFile(remote.process.argv[1], \"utf-8\", (err:any, data:any) => {\r\n        setTextVal(data);\r\n        setPathLoc(remote.process.argv[1].toString())\r\n        setIsSaved(true);\r\n      })\r\n    }\r\n    if(store.get(\"theme\") !== null && store.get(\"theme\") && setTheme ){\r\n      setTheme(store.get(\"theme\"));\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    setIsSaved(false);\r\n    electronLocalshortcut.unregister(remote.getCurrentWindow(), 'Ctrl+S');\r\n    electronLocalshortcut.register(remote.getCurrentWindow(), 'Ctrl+S', () => {\r\n      saveFile();\r\n    });\r\n  }, [textVal])\r\n\r\n\r\n  const openFile = () => {\r\n    dialog.showOpenDialog({properties: ['openFile'] }).then((res) => {\r\n      if(!res.canceled){\r\n        fs.readFile(res.filePaths[0], \"utf-8\", (err:any, data:any) => {\r\n          setTextVal(data);\r\n          setPathLoc(res.filePaths[0].toString())\r\n          setIsSaved(true);\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  const saveFile = () => {\r\n    console.log(textVal);\r\n    if(pathLoc !== \"\"){\r\n      fs.writeFileSync(pathLoc, textVal, \"utf-8\");\r\n      setIsSaved(true);\r\n    }else{\r\n      dialog.showSaveDialog({filters : [\r\n        {name: 'txt', extensions: ['txt',]}\r\n      ]}).then((res) => {\r\n        if(res && !res.canceled && res.filePath){\r\n          console.log(res.filePath.toString());\r\n          fs.writeFileSync(res.filePath.toString(), textVal, \"utf-8\");\r\n          setIsSaved(true);\r\n          setPathLoc(res.filePath.toString());\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  const toggleThemeMenu = () => {\r\n    (isThemeMenuOpen) ? setIsThemeMenuOpen(false) : setIsThemeMenuOpen(true);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.typeAreaContainer}>\r\n      <textarea style={textAreaStyle} spellCheck=\"false\" className={styles.textAreaBox} name={\"main_textarea\"} value={textVal} onChange={(e) => {setTextVal(e.target.value);}}></textarea>\r\n      \r\n      <div style={bottomBarStyle} className={styles.bottomStatusBar}>\r\n        <div>\r\n          <Menu menuData={[\r\n              {name: \"Dark\", action: () => {\r\n                if(setTheme){\r\n                  setTheme(\"Dark\")\r\n                  store.set(\"theme\", \"Dark\");\r\n                }\r\n                toggleThemeMenu();\r\n                return true;\r\n              }},\r\n              {name: \"Monokai\", action: () => {\r\n                if(setTheme){\r\n                  setTheme(\"Monokai\")\r\n                  store.set(\"theme\", \"Monokai\");\r\n                }\r\n                toggleThemeMenu();\r\n                return true;\r\n              }},\r\n              {name: \"Nightblue\", action: () => {\r\n                if(setTheme){\r\n                  setTheme(\"Nightblue\")\r\n                  store.set(\"theme\", \"Nightblue\");\r\n                }\r\n                toggleThemeMenu();\r\n                return true;\r\n              }}\r\n            ]} isMOpen={isThemeMenuOpen}/>\r\n          <button style={optionBtnsStyles} onClick={toggleThemeMenu} className={styles.optionBtn}>\r\n            <img className={styles.themeIcon} src={themeIcon} alt=\"\"/>\r\n            Themes\r\n          </button>\r\n        </div>\r\n        \r\n        <button style={optionBtnsStyles} onClick={openFile} className={styles.optionBtn}>\r\n          <img className={styles.openIcon} src={openIcon} alt=\"\"/>\r\n          Open\r\n        </button>\r\n        <button style={optionBtnsStyles} disabled={isSaved} onClick={saveFile} className={styles.optionBtn}>\r\n          <img className={styles.saveIcon} src={saveIcon} alt=\"\"/>\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TypeArea;","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\components\\TitleBar\\TitleBar.tsx",["43"],"import React, { useContext } from 'react';\r\nimport logoIcon from '../../images/Logo.svg'\r\nimport minIcon from '../../images/minIcon.svg'\r\nimport maxIcon from '../../images/maxIcon.svg'\r\nimport closeIcon from '../../images/closeIcon.svg'\r\nimport styles from './TitleBar.module.css';\r\nimport { ThemeContext } from '../../contexts/ThemeContext';\r\nimport themeMap from '../../utils/ThemeMap';\r\nconst electron = window.require(\"electron\");\r\nconst remote = electron.remote;\r\n\r\nconst TitleBar:React.FC = () => {\r\n  const {theme, setTheme} = useContext(ThemeContext);\r\n\r\n  const minimizeClick = () => {\r\n    remote.getCurrentWindow().minimize();\r\n  }\r\n\r\n  const closeClick = () => {\r\n    remote.getCurrentWindow().close();\r\n  }\r\n\r\n  return (\r\n    <div style={{backgroundColor: `${themeMap[theme].textBg}`, color: `${themeMap[theme].textColor}`}} className={styles.titleBarContainer}>\r\n      <img className={styles.logoIcon} src={logoIcon} alt=\"\"/>\r\n      <span className={styles.titleName}>Darkpad</span>\r\n      <div className={styles.middlePad}></div>\r\n      <div style={{backgroundColor: `${themeMap[theme].textBg}`, color: `${themeMap[theme].textColor}`}} className={styles.controlBtns}>\r\n        <button onClick={minimizeClick} className={styles.controlbtn}>\r\n          <img className={styles.controlSVGImg} src={minIcon} alt=\"\"/>\r\n        </button>\r\n\r\n        <button onClick={() => {}} className={styles.controlbtn}>\r\n          <img className={styles.controlSVGImg} src={maxIcon} alt=\"\"/>\r\n        </button>\r\n        \r\n        <button onClick={closeClick} className={styles.controlbtnClose}>\r\n          <img className={styles.controlSVGImg} src={closeIcon} alt=\"\"/>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TitleBar;\r\n","C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\components\\Menu\\Menu.tsx",["44"],"import React, {useState} from 'react';\r\nimport styles from './Menu.module.css';\r\n\r\nexport interface MenuInterface extends Array<MenuItem>{}\r\n\r\ninterface MenuItem{\r\n  name: String,\r\n  action: ()=>boolean\r\n}\r\n\r\nconst Menu : React.FC<{menuData : MenuInterface, isMOpen : boolean}> = ({menuData, isMOpen}) => {\r\n  \r\n  console.log(isMOpen);\r\n\r\n  return (\r\n    <div style={{display: isMOpen ? 'block' : 'none' }} className={styles.dropDownMenuContainer}>\r\n      {\r\n        menuData.map((menu, index) => {\r\n          return <div key={index} onClick={menu.action} className={styles.dropDownMenuItem}>{menu.name}</div>\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;",["45","46"],"C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\contexts\\ThemeContext.tsx",[],"C:\\Users\\ravi\\Documents\\WebDevelopment\\DarkPad\\darkpad\\src\\utils\\ThemeMap.ts",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":51,"column":5,"nodeType":"53","endLine":51,"endColumn":7,"suggestions":"54"},{"ruleId":"51","severity":1,"message":"55","line":59,"column":6,"nodeType":"53","endLine":59,"endColumn":15,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":13,"column":17,"nodeType":"59","messageId":"60","endLine":13,"endColumn":25},{"ruleId":"57","severity":1,"message":"61","line":1,"column":16,"nodeType":"59","messageId":"60","endLine":1,"endColumn":24},{"ruleId":"47","replacedBy":"62"},{"ruleId":"49","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setTheme'. Either include it or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has a missing dependency: 'saveFile'. Either include it or remove the dependency array.",["67"],"@typescript-eslint/no-unused-vars","'setTheme' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.",["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [setTheme]",{"range":"72","text":"73"},"Update the dependencies array to be: [saveFile, textVal]",{"range":"74","text":"75"},[1813,1815],"[setTheme]",[2055,2064],"[saveFile, textVal]"]